
# Проверка столкновения с ракетками
    if ball.colliderect(paddle_left) or ball.colliderect(paddle_right):
        ball_speed[0] = -ball_speed[0]
        hit_sound.play()



def draw_objects():
    # Отрисовка объектов
    screen.blit(field_image, (0, 0))
    screen.blit(paddle_image, paddle_left)
    screen.blit(paddle_image, paddle_right)
    pygame.draw.rect(screen, WHITE, paddle_left)
    pygame.draw.rect(screen, WHITE, paddle_right)
    screen.blit(ball_image, ball)
    # pygame.draw.ellipse(screen, WHITE, ball)

    # Отрисовка счета
    score_text = font.render(f"{score[0]} : {score[1]}", True, WHITE)
    screen.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, 10))

    # Обновление экрана
    pygame.display.flip()

play_button_rect = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 105, 110, 50)
play_button_color = (0, 255, 0)

# Вывод окна с приветствием и элементами управления
def draw_menu():
    font = pygame.font.Font(None, 24)
    # title_text = font.render("Добро пожаловать в Пинг-понг!", True, WHITE)
    # controls_text = font.render("Управление левой плиткой: W - вверх, S - вниз", True, WHITE)
    #
    # if is_robot_opponent:
    #     controls_text2 = font.render("Управление правой плиткой: Автоматически (робот)", True, WHITE)
    # else:
    #     controls_text2 = font.render("Управление правой плиткой: Стрелка вверх - вверх, Стрелка вниз - вниз", True,
    #                                  WHITE)
    #
    # controls_text3 = font.render("R - Сменить оппонента (робот/друг)", True, WHITE)
    controls_text4 = font.render("ENTER для продолжения...", True, WHITE)

    screen.blit(background_image, (0, 0))
    # screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, 100))
    # screen.blit(controls_text, (WIDTH // 2 - controls_text.get_width() // 2, 200))
    # screen.blit(controls_text2, (WIDTH // 2 - controls_text2.get_width() // 2, 250))
    # screen.blit(controls_text3, (WIDTH // 2 - controls_text3.get_width() // 2, 300))
    # screen.blit(controls_text4, (WIDTH // 2 - controls_text4.get_width() // 2, 350))

    # pygame.draw.rect(screen, play_button_color, play_button_rect)
    # play_text = font.render("Играть", True, WHITE)
    # screen.blit(play_text, (play_button_rect.centerx - play_text.get_width() // 2,
    #                         play_button_rect.centery - play_text.get_height() // 2))

    pygame.display.flip()

# Отображение меню перед началом игры
draw_menu()

# # Ожидание нажатия клавиши для начала игры
# while True:
#     for event in pygame.event.get():
#         if event.type == pygame.KEYDOWN:
#             if event.key == pygame.K_RETURN:
#                 break
#             elif event.key == pygame.K_r:
#                 is_robot_opponent = not is_robot_opponent
#                 draw_menu()
#
#     handle_events()
#     draw_menu()
#     # Завершение ожидания при нажатии клавиши Enter
#     keys = pygame.key.get_pressed()
#     if keys[pygame.K_RETURN]:
#         break

# Ожидание нажатия клавиши или кнопки Играть
while True:
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
            elif event.key == pygame.K_r:
                is_robot_opponent = not is_robot_opponent
                draw_menu()
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Левая кнопка мыши
                if play_button_rect.collidepoint(event.pos):
                    break

    handle_events()
    draw_menu()

    # Завершение ожидания при нажатии клавиши Enter или кнопки Играть
    keys = pygame.key.get_pressed()
    mouse_buttons = pygame.mouse.get_pressed()
    if keys[pygame.K_RETURN] or mouse_buttons[0] == 1:
        break
# Основной игровой цикл
while True:

    handle_events()
    move_paddles()
    move_ball()
    draw_objects()

# Проверка условия завершения игры
    if score[0] >= 8 or score[1] >= 8:
        winner_text = font.render(f"Игрок {1 if score[0] >= 8 else 2} побеждает!", True, WHITE)
        screen.blit(winner_text, (WIDTH // 2 - winner_text.get_width() // 2, HEIGHT // 2))
        pygame.display.flip()
        pygame.time.wait(3000)  # Пауза перед завершением
        pygame.quit()
        sys.exit()

        # Установка частоты кадров
    clock.tick(FPS)
