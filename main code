import pygame
import sys
import random

# Инициализация Pygame
pygame.init()

# Константы
WIDTH, HEIGHT = 625, 400
BALL_RADIUS = 15
PADDLE_WIDTH, PADDLE_HEIGHT = 10, 60
FPS = 60

# Цвета
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

pygame.mixer.init()
hit_sound = pygame.mixer.Sound("pup.mp3")
score_sound = pygame.mixer.Sound("pap.mp3")
pygame.mixer.music.load("music.mp3")
pygame.mixer.music.play()

# Создание окна
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Пинг-понг")

background_image = pygame.image.load("PingPong .jpg")
background_image = pygame. transform.scale(background_image, (background_image.get_width()//4, background_image.get_height()//3.9))
field_image = pygame.image.load("Ping.png")
field_image = pygame. transform.scale(field_image, (background_image.get_width()//1.02, background_image.get_height()//1))
ball_image = pygame.image.load("Снимок_экрана_2024-02-19_в_14.50.57-transformed.png").convert_alpha()
ball_image = pygame. transform.scale(ball_image, (background_image.get_width()//17, background_image.get_height()//15))
# paddle_image = pygame.image.load("Ping Pong (tile).png").convert_alpha()
# paddle_image = pygame. transform.scale(paddle_image, (background_image.get_width()//9, background_image.get_height()//9))

screen.blit(background_image, (0, 0))
screen.blit(field_image, (0, 0))
screen.blit(ball_image, (0, 0))
# screen.blit(paddle_image, (0, 0))

# Инициализация объектов
ball = pygame.Rect(WIDTH // 2 - BALL_RADIUS, HEIGHT // 2 - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)
paddle_left = pygame.Rect(20, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)
paddle_right = pygame.Rect(WIDTH - 20 - PADDLE_WIDTH, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)

# Начальная скорость мяча
ball_speed = [8, 8]

# Скорость компьютерного игрока
computer_speed = 5

# Очки
score = [0, 0]  # Счет для левого игрока (score[0]) и правого игрока (score[1])

font = pygame.font.Font(None, 36)

# Основной игровой цикл
clock = pygame.time.Clock()

def handle_events():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()


def move_paddles():
    # Управление левой плиткой
    keys = pygame.key.get_pressed()
    if keys[pygame.K_w] and paddle_left.top > 0:
        paddle_left.y -= 8
    if keys[pygame.K_s] and paddle_left.bottom < HEIGHT:
        paddle_left.y += 8

     # Управление правой плиткой (другом)
     if not is_robot_opponent:
         if keys[pygame.K_UP] and paddle_right.top > 0:
             paddle_right.y -= 8
     if keys[pygame.K_DOWN] and paddle_right.bottom < HEIGHT:
             paddle_right.y += 8



def reset_ball():
    ball.center = (WIDTH // 2, HEIGHT // 2)
    # Установим случайное направление для мяча после восстановления
    ball_speed[0] *= random.choice([1, -1])
    ball_speed[1] *= random.choice([1, -1])


def move_ball():
    # Движение мяча
    ball.x += ball_speed[0]
    ball.y += ball_speed[1]

    # Отскок мяча от верхней и нижней границ
    if ball.top <= 0 or ball.bottom >= HEIGHT:
        ball_speed[1] = -ball_speed[1]

    # Отскок мяча от границ по горизонтали
    if ball.left <= 0:
        reset_ball()
        # Увеличение счета для правого игрока при попадании мяча в левую границу
        score[1] += 1
        score_sound.play()
    elif ball.right >= WIDTH:
        reset_ball()
        # Увеличение счета для левого игрока при попадании мяча в правую границу
        score[0] += 1
        score_sound.play()

    # Проверка столкновения с ракетками
    if ball.colliderect(paddle_left) or ball.colliderect(paddle_right):
        ball_speed[0] = -ball_speed[0]
        hit_sound.play()



def draw_objects():
    # Отрисовка объектов
    screen.blit(field_image, (0, 0))
    screen.blit(paddle_image, paddle_left)
    screen.blit(paddle_image, paddle_right)
    pygame.draw.rect(screen, WHITE, paddle_left)
    pygame.draw.rect(screen, WHITE, paddle_right)
    screen.blit(ball_image, ball)
    pygame.draw.ellipse(screen, WHITE, ball)

    # Отрисовка счета
    score_text = font.render(f"{score[0]} : {score[1]}", True, WHITE)
    screen.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, 10))

    # Обновление экрана
    pygame.display.flip()

play_button_rect = pygame.Rect(WIDTH // 2 - 50, HEIGHT // 2 + 105, 110, 50)
play_button_color = (0, 255, 0)

# Вывод окна с приветствием и элементами управления
def draw_menu():
    font = pygame.font.Font(None, 24)
    screen.blit(background_image, (0, 0))

    pygame.display.flip()

# Отображение меню перед началом игры
draw_menu()

# Ожидание нажатия клавиши или кнопки Играть
while True:
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RETURN:
                break
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Левая кнопка мыши
                if play_button_rect.collidepoint(event.pos):
                    break

    handle_events()
    draw_menu()

    # Завершение ожидания при нажатии клавиши Enter или кнопки Играть
    keys = pygame.key.get_pressed()
    mouse_buttons = pygame.mouse.get_pressed()
    if keys[pygame.K_RETURN] or mouse_buttons[0] == 1:
        break
# Основной игровой цикл
while True:

    handle_events()
    move_paddles()
    move_ball()
    draw_objects()

    # Проверка условия завершения игры
    if score[0] >= 8 or score[1] >= 8:
        winner_text = font.render(f"Игрок {1 if score[0] >= 8 else 2} побеждает!", True, WHITE)
        screen.blit(winner_text, (WIDTH // 2 - winner_text.get_width() // 2, HEIGHT // 2))
        pygame.display.flip()
        pygame.time.wait(3000)  # Пауза перед завершением
        pygame.quit()
        sys.exit()

        # Установка частоты кадров
    clock.tick(FPS)
